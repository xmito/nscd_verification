- void error(int status, int errnum, const char* format,...); from <error.h> //OK
//Called in nscd_conf.c find_db function used to find dbnames index
//Function outputs to stderr program name followed by semicolon, number of arguments using format string and if errnum is nonzero, prints strerror(errnum)
//Called from nscd.c main function when unable to fork child

- long sysconf(int name) from <unistd.h> //OK
//Called in initgrcache.c addinitgroupsX with _SC_NGROUPS_MAX to limit size of gid_t array
//Called in compat-initgroups.c compat-call with _SC_GETGR_R_SIZE_MAX(also called in initgrcache)
//Called in connections.c nscd_init function with _SC_PAGESIZE
//Called in connections.c start_threads function with _SC_MONOTONIC_CLOCK and _SC_CLOCK_SELECTION
//Used only if NATIVE_EXEC defined, otherwise unsupported for verification
//Called in connections.c start_threads with _SC_OPEN_MAX (maximum number of open fds)
//Get configuration information at runtime

- int __fsetlocking(FILE* stream, int type); from <stdio_ext.h><stdio.h> //OK
//Called in nscd_conf.c nscd_parse_file function(why feof_unlocked changed to feof?)
//Function used to select desired type of locking on the stream. Returns current type.
//For type the FSETLOCKING_BYCALLER is used to prevent implicit locking around every operation on the stream. Caller should use flockfile()

- int msync(void* addr, size_t len, int flags); from <sys/mman.h> //OK
//Called in cache.c cache_add function only when persistent attribute is set for service-> The content of cache(database_pers_head) is kept over server restarts(flags set to MS_ASYNC)
//Called in pwdcache.c line 154 cache_addpw function with MS_ASYNC flag
//Called in hstcache.c in cache_addhst function with MS_ASYNC flag
//Called in grpcache.c in cache_addgrp function with MS_ASYNC flag
//Called in netgroupcache.c in addinnetgrX and addgetnetgrentX function with MS_ASYNC
//Called in aicache.c addhstaiX function with MS_ASYNC flag
//Called in initgrcache.c addinitgroupsX with MS_ASYNC flag
//Called in servicescache.c cache_addserv function with MS_ASYNC flag
//Called in nscd.c termination_handler function to flush databasa_pers_head to disk using MS_ASYNC flag
//Called in mem.c gc(garbage collector) function with MS_ASYNC flag (flush database if persistent attribute set)
//Called in connections.c restart function with MS_ASYNC flag
//Propagate dataset structure allocated in db to disk
//msync flushes back to disk any changes made to a file mapped via mmap(),synchronizing mapped file with the mapping.

- int poll(struct pollfd *fds, nfds_t nfds, int timeout); from sys/poll.h //OK
//Called in nscd_helper.c wait_on_socket function with POLLIN | POLLERR | POLLHUP
//Called in nscd_helper.c open_socket function with POLLOUT | POLLERR | POLLHUP to wait until socket ready for transfer of reqdata
//Called in connections.c main_loop_poll function
//Provides multiplexed I/O feature

- int munmap(void* addr, size_t length); from sys/mman.h
//Called in nscd_helper.c __nscd_unmap function(to unmap mapped-> head of mapped->mapsize size and free mapped_database afterwards)
//Called in nscd_helper.c __nscd_get_mapping function(if mmap fails)
//Function deletes the mapping specified by addres + range. Further references cause invalid memory access

- void *mmap(void *addr, size_t length, int prot, int flags,
                  int fd, off_t offset);  //OK
//Called in nscd_helper.c __nscd_get_mapping function with PROT_READ for prot and MAP_SHARED for flags
//Called in connections.c nscd_init function with PROT_READ | PROT_WRITE prot and MAP_SHARED flag(map the maximum size for database dbs[cnt]->max_db_size)
//Function maps or unmaps files or devices into memory

- const char* inet_ntop(int af,cons void* src,char* dst, socklen_t size) from <arpa/inet.h> //OK
//Called in cache.c in cache_add function
//Called in pwdcache.c in addpwdbyX function
//Called in hstcache.c in addhstbyX function
//Called in connections.c handle_request function
//Converts network address structure SRC in the AF address family into character string(called with either AF_INET or AF_INET6)


- int posix_fallocate(int fd, off_t offset, off_t len); from fcntl.h //OK
//Called in memc. mempool_alloc function to adjust file size -> new pages become avaiable
//Called in connections.c nscd_init function
//Function allocates disk space to file reffered by fd(wr->fd)

- int mkostemp(char* template, int flags); from stdlib //OK
//Called from connections.c nscd_init function with EXTRA_O_FLAGS(O_CLOEXEC)
//Function creates temporary file(If persistent attribute not set for database, create temporary file)

- time_t time(time_t *t); from time.h //OK
//Called in connections.c main_loop_epoll function
//Function retrieves time in seconds

- char* getenv(const char* name); from stdlib.h
//Called from nscd_getai.c __nscd_getai function with LOCALDOMAIN

- ssize_t sendmsg(int sockfd, const struct msghdr *msg, int flags); from sys/socket.h //OK
//Called in connections.c send_ro_fd function
//Function sends a message on a socket using msghdr struct

- ssize_t recvmsg(int sockfd, struct msghdr *msg, int flags);
//Called in nscd_helper.c _nscd_get_mapping function
//Receive message from socket using msghdr struct

//Declared in divine/divine/llvm/userspace/sys/*
- int chmod(const char* path, mode_t mode) from sys/stat.h
Called in connections.c nscd_init function with DEFFILEMODE
Function changes permission of a file given by path to bitmask mode_t

- ssize_t readv(int fd, const struct iovec *iov, int iovcnt); //OK
//Called in nscd_helper.c readvall function

- char* xstrdup(const char* string); from string.h //OK
//Called in nscd_conf.c in nscd_parse_file function
//Function allocates memory for string using xmalloc function and returns pointer
