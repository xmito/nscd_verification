VARIABLE NUMBER OF ARGUMENTS ********************************************
- vsnprintf() with variable number of arguments called in dbg_log.c

- void error(int status, int errnum, const char* format,...); from <error.h>
Called in nscd_conf.c find_db function used to find dbnames index
Function outputs to stderr program name followed by semicolon, number of arguments using format string and if errnum is nonzero, prints strerror(errnum)
Called from nscd.c main function when unable to fork child

************************************************************************
- long sysconf(int name) from <unistd.h>
Called in initgrcache.c addinitgroupsX with _SC_NGROUPS_MAX to limit size of gid_t array
Called in connections.c nscd_init function with _SC_PAGESIZE
Called in connections.c start_threads function with _SC_MONOTONIC_CLOCK and _SC_CLOCK_SELECTION
Called in connections.c start_threads with _SC_OPEN_MAX (maximum number of open fds)
Get configuration information at runtime

- void syslog(int priority,const char* format,int facility); from<syslog.h>
Called in dbg_log.c to generate log message, which will be distributed by syslogd(8)(Only when debug level is set to 0(default)in nscd).Priority argument is formed by ORing facility and level values.Priority set to LOG_NOTICE(level), what indicates normal importance of message.(openlog()is automatically called by syslog)

- int __fsetlocking(FILE* stream, int type); from <stdio_ext.h><stdio.h>
Called in nscd_conf.c nscd_parse_file function
Function used to select desired type of locking on the stream. Returns current type.
For type the FSETLOCKING_BYCALLER is used to prevent implicit locking around every operation on the stream. Caller should use flockfile()

- int msync(void* addr, size_t len, int flags); from <sys/mman.h>
Called in cache.c cache_add function only when persistent attribute is set for service-> The content of cache(database_pers_head) is kept over server restarts(flags set to MS_ASYNC)
Called in pwdcache.c line 154 cache_addpw function with MS_ASYNC flag
Called in hstcache.c in cache_addhst function with MS_ASYNC flag
Called in grpcache.c in cache_addgrp function with MS_ASYNC flag
Called in netgroupcache.c in addinnetgrX and addgetnetgrentX function with MS_ASYNC
Called in aicache.c addhstaiX function with MS_ASYNC flag
Called in initgrcache.c addinitgroupsX with MS_ASYNC flag
Called in servicescache.c cache_addserv function with MS_ASYNC flag
Called in nscd.c termination_handler function to flush databasa_pers_head to disk using MS_ASYNC flag
Called in mem.c gc(garbage collector) function with MS_ASYNC flag (flush database if persistent attribute set)
Called in connections.c restart function with MS_ASYNC flag
Propagate dataset structure allocated in db to disk
msync flushes back to disk any changes made to a file mapped via mmap(),synchronizing mapped file with the mapping.

- ssize_t send(int sockfd, const void* buf, size_t len, int flags) from <sys/socket.h> and <sys/types.h>
Called in nscd_stat.c send_stats function with MSG_NOSIGNAL flag(used for sending statdata structure)
Called in pwdcache.c cache_addpw function with MSG_NOSIGNAL
Called in hstcache.c cache_addhst function with MSG_NOSIGNAL
Called in grpcache.c cache_addgrp function with MSG_NOSIGNAL
Called in netgroupcache.c do_notfound function with MSG_NOSIGNAL
Called in aicache.c addhstaiX function with MSG_NOSIGNAL
Called in initgrcache.c addinitgroupsX with MSG_NOSIGNAL
Called in servicescache.c cache_addserv function with MSG_NOSIGNAL
Called in nscd_helper.c open_socket function with MSG_NOSIGNAL
Called in nscd.c send_shutdown function with MSG_NOSIGNAL
Called in nscd.c invalidate_db funtion with MSG_NOSIGNAL (send invalidating reqdata)
Called in connections.c writeall function with MSG_NOSIGNAL
Used to send default notfound response structure, if passwd/hostent... structures werent obtained in lookup function(without netgroupcache)
Function used to transmit message to another socket. Call may be issued only when socket is in connected state

- ssize_t sendmsg(int sockfd, const struct msghdr *msg, int flags); from sys/socket.h
Called in connections.c send_ro_fd function
Function sends a message on a socket using msghdr struct

- __gethostbyname3_r called with AF_INET and AF_INET6 in hstcache.c
- __gethostbyaddr2_r called with NS_INADDRSZ and NSIN6ADDRSZ in hstcache.c

- int prctl(int option, unsigned long arg2, unsigned long arg3, unsigned long arg4, unsigned long arg5) from <sys/prctl.h>
Called in selinux.c preserve_capabilities function with PR_SET_KEEPCAPS option
Operations on the process. When called, options describe what to do with values defined in linux/prctl.h
PR_SET_KEEPCAPS-> Set the state of the threads keep capabilities flag. According first arg value, the thread either preserves permitted capability set when UID,real,saved,effective id changes to nonzero value or permitted capability set is dropped

- int cap_set_flag(cap_t cap_p, cap_flag_t flag, int ncap,
  const cap_value_t *capsint ncap,", cap_flag_value_t " value ");"
Called in selinux.c preserve_capabilities function with CAP_PERMITTED and CAP_EFFECTIVE cap_flag_t and CAP_SET cap_flag_value_t
Sets the flag, flag, of each capability in the array caps in the capability state identified by cap_p to value.

- int poll(struct pollfd *fds, nfds_t nfds, int timeout); from sys/poll.h
Called in nscd_helper.c wait_on_socket function with POLLIN | POLLERR | POLLHUP
Called in nscd_helper.c open_socket function with POLLOUT | POLLERR | POLLHUP to wait until socket ready for transfer of reqdata
Provides multiplexed I/O feature

- int epoll_create(int size);
Called in connections.c start_threads function
Function creates new epoll instance and returns file descriptor handle

- int epoll_ctl(int epfd, int op, int fd, struct epoll_event* event); from sys/epoll.h
Called in connections.c main_loop_epoll function with EPOLL_CTL_ADD op
Called in connections.c main_loop_epoll function with EPOLL_CTL_DEL
Function controls interface for an epoll descriptor

- int epoll_wait(int epfd, struct epoll_event *events, int maxevents, int timeout);
Called in connections.c main_loop_epoll function
Function waits for an I/O event on an epoll file descriptor

- int gettimeofday(struct timeval *tv, struct timezone *tz); from sys/time.h
Called in nscd_helper.c wait_on_socket function with timezones=NULL
Called in nscd_helper.c open_socket function with timezone=NULL

- struct passwd* getpwnam(const char* name);
Called in connections.c begin_drop_privileges function
Function retrieves password file entry

- int socket(int domain, int type, int protocol); from sys/socket.h
Called in nscd_helper.c open_socket() function with PF_UNIX domain and SOCK STREAM | SOCK_CLOEXEC | SOCK_NONBLOCK type and 0 for protocol()(unspecified)
Called in nscd.c nscd_open_socket function with PF_UNIX domain and SOCK_STREAM type
Called in connections.c nscd_init function with AF_UNIX domain and SOCK_STREAM | SOCK_CLOEXEC | SOCK_NONBLOCK type(protocol set to 0)
Called in connections.c nscd_init function with AF_NETLINK domain and SOCK_RAW | SOCK_CLOEXEC | SOCK_NONBLOCK type and NETLINK_ROUTE protocol(Open netlink socket to monitor network setting changes)
Full duplex communication, with nonblocking mode and close-on-exec
Socket creates an endpoint for communication and returns a descriptor

- int getsockopt(int sockfd, int level, int optname, void* optval, socklen_t* optlen); from sys/socket.h
Called in connections.c handle_request function with SOL_SOCKET level SO_PEERCRED optname
Called in connections.c restart function with SOL_SOCKET level, SO_PEERCRED optname
Function gets options on socket

- int accept4(int sockfd, struct sockaddr *addr, socklen_t *addrlen, int flags); from sys/socket.h
Called in connections.c main_loop_poll function with SOCK_NONBLOCK flag
Function accepts a connection on a socket(SOCK_STREAM or SOCK_SEQPACKET), extracts first connection request on the queue of pending connections for the listening socket and creates new listening socket, which is also return value

- int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen); from sys/socket.h
Called in connections.c main_loop_poll functio
Function accepts connection on socket

- int fcntl(int fd, int cmd, .../*args*/); from unistd.h and fcntl.h
Called in nscd_helper.c open_socket function with F_SETFL(Set the file status flags to the value specified by arg) cmd and O_RDWR | O_NONBLOCK arguments
Called in nscd.c main function with F_SETFL cmd and O_RDONLY | O_NONBLOCK args to set file status flag after using inotify_init() without flags
Called in connections.c nscd_init function with F_SETFD and FD_CLOEXEC
Called in connections.c nscd_init function with F_GETFL cmd
Called in connections.c nscd_init function with F_SETFL cmd and O_NONBLOCK
Function manipulates file descriptors

- int connect (int sockfd, const struct sockaddr* addr, socklen_t addrlen); from sys/socket.h
Called from nscd_helper.c open_socket function with sockfd of socket referenced with SOCK_STREAM
Called from nscd.c nscd_open_socket function to connect socket with addr
Function connects the socket referred to by file sockfd to the address specified by addr. In case of SOCK_STREAM, this call attempts to make a connection to a socket that is bound to the address specified by addr

- int bind(int sockfd, const struct sockaddr* addr, socklen_t addrlen); from sys/socket.h
Called in connections.c nscd_init function
Function binds a name to socket(before SOCK_STREAM may receive connections)

- int pipe(int pipefd[2]); from unistd.h
Called in nscd.c main function
Function creates a pipe for unidirectional data channel that can be used for interprocess communication

- pid_t fork(void); from unistd.h
Called in nscd.c main function (Creating daemon)
Function creates new process by duplicating the calling process(copy-on-write);

- int munmap(void* addr, size_t length); from sys/mman.h
Called in nscd_helper.c __nscd_unmap function(to unmap mapped-> head of mapped->mapsize size and free mapped_database afterwards)
Called in nscd_helper.c __nscd_get_mapping function(if mmap fails)
Function deletes the mapping specified by addres + range. Further references cause invalid memory access

- void *mmap(void *addr, size_t length, int prot, int flags,
                  int fd, off_t offset);
Called in nscd_helper.c __nscd_get_mapping function with PROT_READ for prot and MAP_SHARED for flags
Called in connections.c nscd_init function with PROT_READ | PROT_WRITE prot and MAP_SHARED flag(map the maximum size for database dbs[cnt]->max_db_size)
Function maps or unmaps files or devices into memory

- void openlog(const char* ident, int option, int facility); from syslog.h
Called in nscd.c main function with options LOG_CONS | LOG_ODELAY and facilities LOG_DAEMON
Function opens connection to the system logger

- int inotify_init1(int flags) from sys/inotify.h
Called from nscd.c main function with IN_NONBLOCK flag
Function initializes new inotify instance

- int inotify_add_watch(int fd, const char *pathname, uint32_t mask); from sys/inotify.h
Called in connections.c register_traced_file function with IN_DELETE_SELF | IN_MODIFY mask
Function adds a watch to an initialized inotify instance

- int open(const char* pathname, int flags) from sys/stat.h, fcntl.h
Called in nscd.c main function with O_RDWR flag
Called in connections.c nscd_init function with O_RDWR and O_CLOEXEC
Called in connections.c nscd_init function with O_RDWR | O_CREAT | O_EXCL | O_TRUNC | O_CLOEXEC | S_IRUSR | S_IWUSR (create database)
Called in connections.c nscd_init function with O_RDONLY | O_CLOEXEC  flags

- int close(fd); from unistd.h
Called from connections.c close_sockets function

- ssize_t pwrite(int fd, const void *buf, size_t count, off_t offset); from unistd.h
Called in connections.c nscd_init function(Initialize hash table)
Function writes to file at given offset, without manipulating offset in file

- ssize_t write(int fd, const void *buf, size_t count); from unistd.h
Called from connections.c nscd_init function
Function writes to a file descriptor

- ssize_t read(int fd, void *buf, size_t count);
Called from connections.c restart function
Called in nscd_helper.c __nscd_open_socket function
Called in nscd_helper.c __readall/__readvall function

- int chmod(const char* path, mode_t mode) from sys/stat.h
Called in connections.c nscd_init function with DEFFILEMODE
Function changes permission of a file given by path to bitmask mode_t

- int listen(int sockfd, int backlog); from sys/socket.h
Called in connections.c from nscd_init function with SOMAXCONN backlog
Function listens for connections on socket, backlog defines maximum pending connections in queue

- int setresuid(uid_t ruid, uid_t euid, uid_t suid); from unistd.h
Called in connections.c restart function
Called in connections.c finish_drop_privileges
Function sets real, effective and saved user id

- int setresgid(gid_t rgid, gid_t egid, gid_t sgid); from unistd.h
Called in connections.c restart function
Called in connections.c finish_drop_privileges
Functions sets real, effective and saved group id

- int setuid(uid_t uid); from unistd.h
Called in connections.c restart function
Called in connections.c finish_drop_privileges function
Function sets user identity

- int setgid(gid_t gid);
Called in connections.c restart function
Called in connections.c finish_drop_privileges
Function sets group identity

- int chdir(cons char* path); from unistd.h
Called in connections.c restart function
Function changes current working directory

- int execv(const char* path, char *const argv[]);
Called in connections.c restart function
Function replaces current process image with new one

- int stat64(int fd, *struct stat64 st); from <sys/stat.h>
Called in cache.c prune_cache function.
Returns information about file. Used for table->traced_files, what are registered filenames used to fill database

- int fstat64(int fd, struct stat *buf);
Called in connections.c nscd_init function

- void* alloca(size_t size); from <alloca.h>
Called in cache.c prune_cache function
Allocate size bytes on stack

- void* xcalloc(size_t nelem, size_t elsize);
Called in cache.c prune_cache function

- void* xmalloc(size_t);
Called in connections.c nscd_init
Called in connections.c main_loop_poll
Function allocates size_t bytes, otherwise if failed, error output is redirected to stderr and program terminates

- const char* inet_ntop(int af,cons void* src,char* dst, socklen_t size) from <arpa/inet.h>
Called in cache.c in cache_add function
Called in pwdcache.c in addpwdbyX function
Called in hstcache.c in addhstbyX function
Called in connections.c handle_request function
Converts network address structure SRC in the AF address family into character string(called with either AF_INET or AF_INET6)

- int feof_unlocked(FILE* stream); from <stdio.h>
Called from nscd_conf.c
Thread-unsafe equivalent of feof(), doesn't perform implicit file locking

- char* get_current_dir_name(void) from <unistd.h>
Called from nscd_conf.c

- uid_t getuid(void); from <unistd.h>
Called in nscd_stat.c in receive_print_stat()
Called in connections.c begin_drop_privileges function
Called in selinux.c preserve_capabilities function

- gid_t getgid(void); from unistd.h
Called from connections.c begin_drop_privileges
Function returns effective group ID of the calling process

- int getgrouplist(const char* user, gid_t group, gid_t* groups, int* ngroups); from grp.h
Called from connections.c begin_drop_privileges function
Function returns list of groups that user belongs to. Maximum number of them is specified by ngroups

- void __libc_fatal(char* name) abort with error message
Called from initgrcache.c  function for debugging purposes

- ssize_t readv(int fd, const struct iovec *iov, int iovcnt);
Called in nscd_helper.c __readall/__readvall function
Function reads iovcnt buffers from the file associated with the file descriptor fd into iov structs

- int getpagesize(void) get memory page size
Called in nscd.c in main function

- int kill(pid_t pid, int sig); from signal.h
Called in nscd.c check_pid function to kill process when re-executing nscd

- int posix_fallocate(int fd, off_t offset, off_t len); from fcntl.h
Called in memc. mempool_alloc function to adjust file size -> new pages become avaiable
Called in connections.c nscd_init function
Function allocates disk space to file reffered by fd(wr->fd)

- ssize_t sendfile(int out_fd, int in_fs, off_t *offset, size_t count); from sys/sendfile.h
Called in connections.c sendfileall function
Function transfers data between file descriptors

- int mkostemp(char* template, int flags); from stdlib
Called from connections.c nscd_init function with EXTRA_O_FLAGS(O_CLOEXEC)
Function creates temporary file(If persistent attribute not set for database, create temporary file)

- void _exit(int status);
Called in nscd.c termination_handler function
Function terminates the calling process immediately

- int unlink(const char* pathname); from unistd.h
Called from connections.c to delete the database filename
Function deletes a name and possibly the file it refers to

- ssize_t readlink(const char* path, char* buf, size_t bufsiz); from unistd.h
Called in connections.c handle_request function
Function places the contents of symbolic link path in the buffer buf

- char* setlocale(int category, const char* locale); from locale.h
Called in nscd.c main function with C_ALL category and "" locale
Function sets or queries current program locale

- char* textdomain(const char* domainname); from libintl.h
Called in nscd.c main function

- error_t argp_parse (const struct argp *argp, int argc, char **argv, unsigned flags, int *arg_index, void *input)
Called in nscd.c main function
GNU C function for parsing unix style argument vectors

- void argp_help (const struct argp *argp, FILE *stream, unsigned flags, char *name)
Called in nscd.c main function
GNU C function for printing help message in some context other than parsing the program options

- char* strerror(int errnum); from string.h
Called in connections.c nscd_init function
Return string describing error number

- char* xstrdup(const char* string);
Called in nscd.c more_help function
Function allocates memory for string using xmalloc function and returns pointer

- signalhandler_t signal(int signum, sighandler_t handler);
Called in nscd.c main function
Function sets different signal handlers for signum signal

- char* gettext(const char* msgid);
Called in nscd.c print_version function
Called in nscd.c more_help function
The gettext function searches the currently selected message catalogs for a string which is equal to msgid

- char* strerror_r(int errnum, char* buf, size_t buflen); from string.h
Called in connections.c restart function
Function is thread_safe equivalent of strerror(doesn't hold return value in staticly allocated buffer);

- void* rawmemchr(const void* s, int c);
Called in connections.c restart function
Function scans memory for a character

- int clock_gettime(clockid_t clk_id, struct timespec* tp); from time.h
Called in connections.c restart function
Function retrieves the time of the specified clock clk_id

- int clock_getres(clockid_t clk_id, struct timespec *res);
Called in connections.c start_thread function with CLOCK_MONOTONIC clockid_t
Function retrieves the precision of the specified clock

- size_t offsetof(type, member); from stddef.h
Function returns the offset of the field member from the start of the structure type in bytes

- void abort(void); from stdlib.h
Called in connections.c restart function

- time_t time(time_t *t); from time.h
Called in connections.c main_loop_epoll function
Function retrieves time in seconds

memset/memcpy/memmove/
malloc/free
PTHREAD********************************************************************
- int pthread_condattr_init(pthread_condattr_t* attr);
- int pthread_condattr_setclock(pthread_condattr_t* attr, clockid_t clock_id);
Called in connections.c start_thread function with CLOCK_MONOTONIC clock_id
Function sets the default clock which will be used to measure timeout service of pthread_cond_timedwait()
- int pthread_attr_init(pthread_attr_t *attr);
- int pthread_attr_setdetachstate(pthread_attr_t* attr, int detachstate);
- int pthread_attr_setstacksize(pthread_attr_t *attr, size_t stacksize);
- int pthread_mutex_lock(pthread_mutex_t* mutex);
- int pthread_mutex_unlock
- int pthread_rwlock_rdlock
- int pthread_rwlock_lock
- int pthread_rwlock_unlock
- int pthread_cond_signal
